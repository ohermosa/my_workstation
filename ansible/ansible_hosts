#!/usr/bin/env python
"""
original script: https://github.com/ansible/ansible/blob/devel/contrib/inventory/vagrant.py
"""


import sys
import os.path
import subprocess
import re
from paramiko import SSHConfig
from optparse import OptionParser
from collections import defaultdict
import json
import datetime
import time

from ansible.module_utils._text import to_text
from ansible.module_utils.six.moves import StringIO


inventory_cache_file = './.inventory_cache'
_ssh_to_ansible = [('user', 'ansible_user'),
                   ('hostname', 'ansible_host'),
                   ('identityfile', 'ansible_ssh_private_key_file'),
                   ('port', 'ansible_port'),
                   ]



#
# helper functions
#

def import_cache():
    with open(inventory_cache_file, 'r') as f:
        output = json.load(f)
    print(json.dumps(output, indent=2))
    return output


def export_cache(data):
    with open(inventory_cache_file, 'w') as f:
        json.dump(data, f)
    print(json.dumps(data, indent=2))

# get all the ssh configs for all boxes in an array of dictionaries.
def get_ssh_config(list_of_hosts):
    return dict((k, get_a_ssh_config(k)) for k in list_of_hosts)


# list all the running boxes
def list_running_boxes():
    output = to_text(subprocess.check_output(["vagrant", "status"]), errors='surrogate_or_strict').split('\n')
    boxes = []
    for line in output:
        matcher = re.search(r"([^\s]+)[\s]+running \(.+", line)
        if matcher:
            boxes.append(matcher.group(1))
    return boxes


# get the ssh config for a single box
def get_a_ssh_config(box_name):
    """Gives back a map of all the machine's ssh configurations"""

    output = to_text(subprocess.check_output(["vagrant", "ssh-config", box_name]), errors='surrogate_or_strict')
    config = SSHConfig()
    config.parse(StringIO(output))
    host_config = config.lookup(box_name)

    # man 5 ssh_config:
    # > It is possible to have multiple identity files ...
    # > all these identities will be tried in sequence.
    for id in host_config['identityfile']:
        if os.path.isfile(id):
            host_config['identityfile'] = id

    return dict((v, host_config[k]) for k, v in _ssh_to_ansible)


if __name__ == "__main__":
    parser = OptionParser(usage="%prog [options] --list | --host <machine>")
    parser.add_option('-l', '--list', default=False, dest="list", action="store_true",
                    help="Produce a JSON consumable grouping of Vagrant servers for Ansible")
    parser.add_option('--host', default=None, dest="host",
                    help="Generate additional host specific details for given host for Ansible")
    (options, args) = parser.parse_args()


    if options.list:
        if not os.path.exists(inventory_cache_file) or time.time() - os.path.getmtime(inventory_cache_file) > 600:
            list_of_hosts = list_running_boxes()
            ubuntu_machine = list(filter(lambda x: "ubuntu" in x or "mint" in x, list_of_hosts))
            fedora_machine = list(filter(lambda x: "fedora" in x, list_of_hosts))
            ssh_config = get_ssh_config(list_of_hosts)
            meta = defaultdict(dict)

            for host in ssh_config:
                meta['hostvars'][host] = ssh_config[host]

            cache = {
                'all': {
                    'hosts': list_of_hosts,
                    'vars': {}
                },
                'ubuntu': {
                    'hosts': ubuntu_machine,
                    'vars': {}
                },
                'fedora': {
                    'hosts': fedora_machine,
                    'vars': {}
                },
                '_meta': meta
                }
            export_cache(cache)
        else:
            import_cache()
        sys.exit(0)

    # Get out the host details
    # ------------------------------
    elif options.host:
        print(json.dumps(get_a_ssh_config(options.host)))
        sys.exit(0)

    # Print out help
    # ------------------------------
    else:
        parser.print_help()
        sys.exit(0)

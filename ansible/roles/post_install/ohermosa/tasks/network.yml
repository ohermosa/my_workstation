---

- name: "Copy vpn configurations files to NetworkManager"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0600
    owner: root
    group: root
  no_log: true
  loop:
    - src: bbva_vpn.j2
      dest: /etc/NetworkManager/system-connections/BBVA
    - src: datio_mx_vpn.j2
      dest: /etc/NetworkManager/system-connections/Datio_CCR

- name: "check if protonvpn is installed"
  stat:
    path: /usr/local/bin/protonvpn
  register: stat_response
  tags:
    - post_protonvpn

- name: "configure protonvpn if is instaled"
  block:
    - name: "create directories"
      file:
        path: "{{ item.name }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "{{ item.mode }}"
      loop:
        - name: "{{ protonvpn_dir }}"
          mode: "0775"
        - name: "{{ ansible_user_dir }}/.cert/nm-openvpn"
          mode: "0755"

    - name: "get serverinfo.json"
      uri:
        url: https://api.protonvpn.ch/vpn/logicals
      register: uri_response

    - name: "save serverinfo to file"
      copy:
        content: "{{ uri_response.json }}"
        dest: "{{ protonvpn_dir }}/serverinfo.json"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: "get template.ovpn"
      get_url:
        url: 'https://api.protonvpn.ch/vpn/config?Platform=linux&LogicalID={{ uri_response.json["LogicalServers"][0]["ID"] }}&Protocol=tcp'
        dest: "{{ protonvpn_dir }}/template.ovpn"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644

    - name: "delete lines from template.ovpn"
      lineinfile:
        path: "{{ protonvpn_dir }}/template.ovpn"
        regexp: "{{ item }}"
        state: absent
      loop:
        - "^remote .*$"
        - "^script-security.*$"
        - "^up /etc/openvpn/update-resolv-conf$"
        - "^down /etc/openvpn/update-resolv-conf$"

    - name: "copy ovpn template"
      copy:
        src: "{{ protonvpn_dir }}/template.ovpn"
        dest: "{{ protonvpn_dir }}/connect.ovpn"
        remote_src: true
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: "get fastest protonvpn servers"
      protonvpn_fastest:
        servers: '{{ uri_response.json["LogicalServers"] }}'
        tier: '{{ protonvpn.tier }}'
      register: fastest_response

    - name: "add remotes to connect.ovpn"
      lineinfile:
        path: "{{ protonvpn_dir }}/connect.ovpn"
        line: "{{ item }}"
        state: present
      loop: '{{["proto " + protonvpn.protocol] | union(fastest_response.fastest | map("regex_replace", "(.*)", "remote \1 1194") | list) }}'

    - name: "generate protonvpn config"
      template:
        src: "{{ item.name }}.j2"
        dest: "{{ protonvpn_dir }}/{{ item.name }}"
        mode: "{{ item.mode }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
      loop:
        - name: pvpn-cli.cfg
          mode: "0644"
          owner: "{{ ansible_user }}"
          group: "{{ ansible_user }}"
        - name: pvpnpass
          mode: "0600"
          owner: root
          group: root

    - name: "Generate protonvpn configuration for NetworkManager"
      vars:
        remotes: '{{ fastest_response.fastest | map("regex_replace", "(.*)", "\1:1194") | join(", ") }}'
      template:
        src: "protonvpn.j2"
        dest: /etc/NetworkManager/system-connections/ProtonVPN
        mode: 0600
        owner: root
        group: root
      no_log: true

    - name: "Extract CA from template"
      shell: |
        "sed -n '/<ca>/,/</ca>/p' {{ protonvpn_dir}}/template.ovpn | grep -v 'ca>'"
      register: ca_response
      changed_when: false

    - name: "Extract tls cert from template"
      shell: |
        "sed -n '/<tls-auth>/,/</tls-auth>/p' {{ protonvpn_dir}}/template.ovpn | grep -v 'tls-auth>'"
      register: tls_response
      changed_when: false

    - name: "save certs to files"
      copy:
        content: "{{ item.content }}"
        dest: "{{ item.dest }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0600
      loop:
        - content: "{{ ca_response.stdout }}"
          dest: "{{ ansible_user_dir }}/.cert/nm-openvpn/connect-ca.pem"
        - content: "{{ tls_response.stdout }}"
          dest: "{{ ansible_user_dir }}/.cert/nm-openvpn/connect-tls-auth.pem"
  when: stat_response.stat.exists
  tags:
    - post_protonvpn

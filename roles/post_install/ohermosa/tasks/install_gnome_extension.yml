---

- name: "Download zip files of gnome extensions"
  get_url:
    url: "{{ item }}"
    dest: "{{ tmp_download_extensions }}"

- name: "Get downloaded file name"
  find:
    paths: "{{ tmp_download_extensions }}"
    patterns: '^.*zip$'
    use_regex: true
  register: filename

- set_fact:
    downloaded_extension_filename: "{{ filename.files[0].path.split('/')[-1] }}"

- set_fact:
    downloaded_extension_dir: "{{ downloaded_extension_filename | replace('.zip', '') }}"

- name: "Create temporal directory {{ tmp_download_extensions }}/{{ downloaded_extension_dir }}"
  file:
    path: "{{ tmp_download_extensions }}/{{ downloaded_extension_dir }}"
    state: directory

- name: "Unzip gnome extension files"
  unarchive:
    src: "{{ tmp_download_extensions }}/{{ downloaded_extension_filename }}"
    dest: "{{ tmp_download_extensions }}/{{ downloaded_extension_dir }}"
    remote_src: true

- name: "Check if {{ tmp_download_extensions }}/{{ downloaded_extension_dir }}/metadata.json exists"
  stat:
    path: "{{ tmp_download_extensions }}/{{ downloaded_extension_dir }}/metadata.json"
  register: metadata_file

- name: "Get read metadata.json of {{ downloaded_extension_filename }}"
  slurp:
    path: "{{ tmp_download_extensions }}/{{ downloaded_extension_dir }}/metadata.json"
  when: metadata_file.stat.exists
  register: metadata_response

- name: "get subdirectory name into {{ tmp_download_extensions }}/{{ downloaded_extension_dir }}"
  find:
    paths: "{{ tmp_download_extensions }}/{{ downloaded_extension_dir }}"
    file_type: directory
  when: not metadata_file.stat.exists
  register: ls_response

- name: "Get read metadata.json of {{ downloaded_extension_filename }}"
  slurp:
    path: "{{ (ls_response.files|first).path }}/metadata.json"
  when: not metadata_file.stat.exists
  register: metadata_response_2

- name: "Get uuid of {{ downloaded_extension_filename }}"
  set_fact:
    extension_uuid: "{{ (metadata_response.content | b64decode | from_json).uuid }}"
  when: metadata_file.stat.exists

- name: "Get uuid of {{ downloaded_extension_filename }}"
  set_fact:
    extension_uuid: "{{ (metadata_response_2.content | b64decode | from_json).uuid }}"
  when: not metadata_file.stat.exists

- name: "Create local directory for {{ downloaded_extension_dir }}"
  file:
    path: "{{ ansible_user_dir }}/.local/share/gnome-shell/extensions/{{ downloaded_extension_dir }}"
    state: directory
  when: metadata_file.stat.exists

- name: "Copy extension files to final directory"
  synchronize:
    src: "{{ tmp_download_extensions }}/{{ downloaded_extension_dir }}"
    dest: "{{ ansible_user_dir }}/.local/share/gnome-shell/extensions/"
    archive: true
  delegate_to: "{{ inventory_hostname }}"
  when: metadata_file.stat.exists

- name: "Copy extension files to final directory"
  synchronize:
    src: "{{ (ls_response.files|first).path }}/*"
    dest: "{{ ansible_user_dir }}/.local/share/gnome-shell/extensions/{{ downloaded_extension_dir }}/"
    archive: true
  delegate_to: "{{ inventory_hostname }}"
  when: not metadata_file.stat.exists

- name: "Enable gnome extension {{ downloaded_extension_filename }}"
  shell: "gnome-shell-extension-tool -e {{ downloaded_extension_dir }}"

- name: "Delete temporal files"
  file:
    path: "{{ item }}"
    state: absent
  loop:
   - "{{ tmp_download_extensions }}/{{ downloaded_extension_dir }}"
   - "{{ tmp_download_extensions }}/{{ downloaded_extension_filename }}"
